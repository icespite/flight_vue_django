import datetime
import json
import math

import utils

from manager.flylog import flylog_all, if_sameday, search_flylog_by_flightNumber, \
    search_flylog_by_flightNumber_noreplace
from utils import location_all

mark = []
temp = []
flightnumtemp = []
result = []


def search_flylog_by_locationsid_and_time(start, end, time):
    all_flylog = flylog_all()["data"]
    res = []
    for i in all_flylog:
        if i["startlocationId"] == start and i["endlocationId"] == end and if_sameday(time, i["startTime"]) and i[
            'condition'] != 0:
            res.append(i)
    return res


def creattu(time):
    locationall = location_all()['data']
    result = [[0 for i in range(len(locationall) - 1)] for j in range(len(locationall) - 1)]
    for i in range(len(locationall) - 1):
        for j in range(len(locationall) - 1):
            if i == j:
                result[i][i] = 0
            if search_flylog_by_locationsid_and_time(i + 1, j + 1, time):
                result[i][j] = 1
    return result


#
# duiyingdata = [[],
#                [(1, '2020-04-20 11:15', 'KY9695'), (1, '2020-04-20 06:05', 'GJ8827'), (1, '2020-04-20 09:40', 'PN6202'),
#                 (1, '2020-04-20 10:10', '3U8793'), (1, '2020-04-20 16:05', 'G6241'), (1, '2020-04-20 16:10', 'HU7351'),
#                 (1, '2020-04-20 11:50', 'CZ4982'), (1, '2020-04-20 09:35', 'ZH9683'), (1, '2020-04-20 18:35', 'CZ5140'),
#                 (1, '2020-04-20 13:35', 'C7767'), (1, '2020-04-20 16:40', 'KN5898'), (1, '2020-04-20 07:50', 'FM9352'),
#                 (1, '2020-04-20 11:35', 'ZH9673'), (1, '2020-04-20 07:20', 'JD5227'), (1, '2020-04-20 08:45', 'ZH9859'),
#                 (1, '2020-04-20 12:45', 'CA1352'), (1, '2020-04-20 07:00', 'CZ3533'), (1, '2020-04-20 13:30', 'FM9314'),
#                 (1, '2020-04-20 07:10', 'KY9655'), (1, '2020-04-20 17:15', 'CA3547')],
#                [(2, '2020-04-20 11:20', 'CZ2806'), (2, '2020-04-20 13:35', 'ZH9993'), (2, '2020-04-20 16:20', 'MU5738'),
#                 (2, '2020-04-20 18:05', 'HU7269'), (2, '2020-04-20 08:00', 'HU7804'), (2, '2020-04-20 14:00', 'CZ3109'),
#                 (2, '2020-04-20 16:00', 'CZ3503'), (2, '2020-04-20 09:15', 'CA1396')],
#                [(3, '2020-04-20 07:05', 'CZ2856'), (3, '2020-04-20 20:10', 'CZ3388'), (3, '2020-04-20 06:30', 'CZ8647'),
#                 (3, '2020-04-20 09:15', 'CZ3437'), (3, '2020-04-20 09:40', 'HU7729'), (3, '2020-04-20 20:20', 'MU5218'),
#                 (3, '2020-04-20 17:25', 'KY9675'), (3, '2020-04-20 13:50', 'CZ3407'), (3, '2020-04-20 21:05', 'ZH9871'),
#                 (3, '2020-04-20 09:35', 'CA1380'), (3, '2020-04-20 20:55', 'CA1866'), (3, '2020-04-20 12:50', 'FM9312'),
#                 (3, '2020-04-20 20:30', 'SC4676')],
#                [(4, '2020-04-20 22:45', '3U8736'), (4, '2020-04-20 12:45', 'ZH9443'), (4, '2020-04-20 14:45', 'CZ3877'),
#                 (4, '2020-04-20 18:15', '3U4439'), (4, '2020-04-20 12:30', 'CZ3327'), (4, '2020-04-20 20:05', 'MU2306'),
#                 (4, '2020-04-20 08:30', 'MU5304'), (4, '2020-04-20 17:00', 'CZ3545')],
#                [(5, '2020-04-20 09:26', 'SU1111'), (5, '2020-04-20 12:00', 'AQ1115'), (5, '2020-04-20 19:10', 'GX8916'),
#                 (5, '2020-04-20 14:05', 'HU7349'), (5, '2020-04-20 11:10', 'CA4306'), (5, '2020-04-20 07:10', 'ZH9655'),
#                 (5, '2020-04-20 18:05', 'MU5216'), (5, '2020-04-20 13:45', 'CZ5120'), (5, '2020-04-20 16:25', 'KY9867'),
#                 (5, '2020-04-20 21:00', 'CZ3107'), (5, '2020-04-20 10:00', 'CZ3121'), (5, '2020-04-20 11:00', 'CZ3103'),
#                 (5, '2020-04-20 12:30', 'FM9310'), (5, '2020-04-20 13:00', 'CZ3525'), (5, '2020-04-20 17:30', 'FM9318'),
#                 (5, '2020-04-20 10:55', 'CZ3301')],
#                [(6, '2020-04-20 15:10', 'CZ2818'), (6, '2020-04-20 23:05', 'PN6254'), (6, '2020-04-20 15:40', 'K535'),
#                 (6, '2020-04-20 14:15', 'C7641'), (6, '2020-04-20 11:30', 'CZ3869'), (6, '2020-04-20 12:30', 'CZ3511'),
#                 (6, '2020-04-20 16:05', 'CZ3847'), (6, '2020-04-20 17:05', 'CZ3829'), (6, '2020-04-20 11:10', 'MU5734'),
#                 (6, '2020-04-20 07:20', 'JD5227'), (6, '2020-04-20 06:20', 'AQ1105'), (6, '2020-04-20 15:30', 'MU5308'),
#                 (6, '2020-04-20 18:40', 'CZ6344'), (6, '2020-04-20 06:15', 'AQ1059'),
#                 (6, '2020-04-20 14:35', 'KN5896')],
#                [(7, '2020-04-20 08:35', 'ZH9693'), (7, '2020-04-20 16:40', '3U8746'), (7, '2020-04-20 13:35', 'KY9993'),
#                 (7, '2020-04-20 16:48', 'C7709'), (7, '2020-04-20 21:10', 'CZ3377'), (7, '2020-04-20 14:25', 'CZ3501'),
#                 (7, '2020-04-20 17:55', 'CZ5164'), (7, '2020-04-20 06:30', 'KY9855'), (7, '2020-04-20 16:25', 'ZH9867'),
#                 (7, '2020-04-20 18:45', 'KY9869'), (7, '2020-04-20 08:00', 'CZ3101'), (7, '2020-04-20 11:00', 'CZ3537'),
#                 (7, '2020-04-20 08:50', 'ZH9651'), (7, '2020-04-20 07:10', 'CA3833')],
#                [(8, '2020-04-20 13:45', 'CZ3425'), (8, '2020-04-20 10:55', 'CA4320'), (8, '2020-04-20 19:25', 'CZ3608'),
#                 (8, '2020-04-20 18:35', 'MF8348'), (8, '2020-04-20 14:06', 'C7707'), (8, '2020-04-20 14:55', 'HU7361'),
#                 (8, '2020-04-20 18:15', 'CA3605'), (8, '2020-04-20 06:45', 'AQ1033'), (8, '2020-04-20 06:05', 'AQ1053'),
#                 (8, '2020-04-20 16:35', 'CZ3499'), (8, '2020-04-20 07:20', 'ZH9857'), (8, '2020-04-20 08:45', 'CA3883'),
#                 (8, '2020-04-20 08:00', 'CZ3523'), (8, '2020-04-20 08:50', 'CA3495')],
#                [(9, '2020-04-20 23:40', 'PN6206'), (9, '2020-04-20 17:50', 'CA4302'), (9, '2020-04-20 11:30', 'MU5212'),
#                 (9, '2020-04-20 08:55', 'HU7275'), (9, '2020-04-20 22:10', 'MU5742'), (9, '2020-04-20 15:15', 'D2834'),
#                 (9, '2020-04-20 09:10', 'CZ3843'), (9, '2020-04-20 10:50', 'KY9861'), (9, '2020-04-20 18:00', 'CZ3111'),
#                 (9, '2020-04-20 16:40', 'KN5898'), (9, '2020-04-20 07:15', 'KY9995')],
#                [(10, '2020-04-20 08:55', 'CA4354'), (10, '2020-04-20 18:35', 'CZ2840'),
#                 (10, '2020-04-20 12:00', 'CZ3443'), (10, '2020-04-20 14:15', 'C7641'),
#                 (10, '2020-04-20 14:35', 'KN5896'), (10, '2020-04-20 09:00', 'CZ3803'),
#                 (10, '2020-04-20 13:55', 'CZ3623'), (10, '2020-04-20 08:30', 'CA3771'),
#                 (10, '2020-04-20 08:35', 'ZH9693'), (10, '2020-04-20 11:15', 'ZH9695'),
#                 (10, '2020-04-20 14:55', 'CZ3449'), (10, '2020-04-20 06:10', 'AQ1027'),
#                 (10, '2020-04-20 07:20', 'CA3875'), (10, '2020-04-20 08:10', 'CA1310'),
#                 (10, '2020-04-20 16:20', 'CA1829'), (10, '2020-04-20 20:50', 'CZ6302'),
#                 (10, '2020-04-20 13:35', 'ZH9993')],
#                [(11, '2020-04-20 11:15', 'CA3585'), (11, '2020-04-20 08:15', 'CZ3129'),
#                 (11, '2020-04-20 09:35', 'KY9683'), (11, '2020-04-20 20:20', 'MU9794'),
#                 (11, '2020-04-20 19:35', 'CZ354'), (11, '2020-04-20 13:45', 'CA3445'),
#                 (11, '2020-04-20 08:30', 'ZH9671'), (11, '2020-04-20 11:35', 'CA3735'),
#                 (11, '2020-04-20 10:43', 'K237'), (11, '2020-04-20 23:10', 'CZ3423'),
#                 (11, '2020-04-20 08:45', 'KY9859'), (11, '2020-04-20 11:50', 'ZH9863'),
#                 (11, '2020-04-20 21:30', 'CZ3165'), (11, '2020-04-20 10:30', 'CA1330'),
#                 (11, '2020-04-20 19:00', 'CZ3105'), (11, '2020-04-20 09:00', 'CZ3099'),
#                 (11, '2020-04-20 06:45', '9C8930'), (11, '2020-04-20 11:30', 'FM9304'),
#                 (11, '2020-04-20 12:00', 'CZ3539'), (11, '2020-04-20 17:15', 'SC9045')],
#                [(12, '2020-3-26 9:34', 'SU1112'), (12, '2020-04-20 07:40', 'CA4396'),
#                 (12, '2020-04-20 13:35', 'KY9993'), (12, '2020-04-20 06:35', 'AQ1037'),
#                 (12, '2020-04-20 11:00', 'MF8324'), (12, '2020-04-20 11:25', 'CZ3195'),
#                 (12, '2020-04-20 17:25', 'ZH9675'), (12, '2020-04-20 12:55', '3U8162'),
#                 (12, '2020-04-20 18:10', 'MU5740'), (12, '2020-04-20 07:30', 'MU9302'),
#                 (12, '2020-04-20 12:50', 'SC4712')],
#                [(13, '2020-04-20 16:55', 'CA4350'), (13, '2020-04-20 12:25', 'CA4362'),
#                 (13, '2020-04-20 21:05', 'KY9445'), (13, '2020-04-20 09:25', 'CZ6437'),
#                 (13, '2020-04-20 19:05', 'CA1726'), (13, '2020-04-20 18:15', 'KY9981'),
#                 (13, '2020-04-20 06:45', 'AQ1033'), (13, '2020-04-20 18:30', 'CZ3489'),
#                 (13, '2020-04-20 17:55', 'CZ6296'), (13, '2020-04-20 06:30', 'ZH9855'),
#                 (13, '2020-04-20 19:45', 'CA1302'), (13, '2020-04-20 16:45', 'CA1340'),
#                 (13, '2020-04-20 19:40', 'CZ5256'), (13, '2020-04-20 10:00', 'CZ6332')],
#                [(14, '2020-04-20 09:25', 'HU7039'), (14, '2020-04-20 10:45', 'CZ3380'),
#                 (14, '2020-04-20 07:45', 'ZH9441'), (14, '2020-04-20 11:50', '3U8732'),
#                 (14, '2020-04-20 21:30', 'FM9320'), (14, '2020-04-20 06:30', 'MU5746'),
#                 (14, '2020-04-20 14:20', 'MU5736'), (14, '2020-04-20 07:20', 'JD5227'),
#                 (14, '2020-04-20 21:05', 'KY9871'), (14, '2020-04-20 21:15', 'CZ3871'),
#                 (14, '2020-04-20 20:50', 'HU7802'), (14, '2020-04-20 09:30', 'MU5314'),
#                 (14, '2020-04-20 16:40', 'CZ3581'), (14, '2020-04-20 07:10', 'ZH9655')],
#                [(15, '2020-04-20 08:35', 'KY9693'), (15, '2020-04-20 21:45', 'CZ2826'),
#                 (15, '2020-04-20 07:15', 'CZ3403'), (15, '2020-04-20 15:40', 'CA4318'),
#                 (15, '2020-04-20 12:45', 'KY9443'), (15, '2020-04-20 11:55', 'CZ4980'),
#                 (15, '2020-04-20 17:35', 'CZ6540'), (15, '2020-04-20 12:40', 'CA1730'),
#                 (15, '2020-04-20 06:35', '3U4437'), (15, '2020-04-20 07:50', 'CZ3615'),
#                 (15, '2020-04-20 19:35', 'CZ3905'), (15, '2020-04-20 06:45', 'AQ1033'),
#                 (15, '2020-04-20 13:35', 'ZH9993'), (15, '2020-04-20 16:10', 'CZ3692'),
#                 (15, '2020-04-20 16:52', 'D2840'), (15, '2020-04-20 11:00', 'MU2808'),
#                 (15, '2020-04-20 18:45', 'ZH9869'), (15, '2020-04-20 15:45', 'CA1316'),
#                 (15, '2020-04-20 10:00', 'CZ3531'), (15, '2020-04-20 14:30', 'MU5306'),
#                 (15, '2020-04-20 11:40', 'MU5182')],
#                [(16, '2020-04-20 19:25', 'CZ6852'), (16, '2020-04-20 09:20', 'CZ6276'),
#                 (16, '2020-04-20 19:55', 'CA4342'), (16, '2020-04-20 13:35', 'ZH9993'),
#                 (16, '2020-04-20 16:59', 'C7643'), (16, '2020-04-20 13:30', 'CZ3413'),
#                 (16, '2020-04-20 17:40', 'CZ3483'), (16, '2020-04-20 07:10', 'CA3833'),
#                 (16, '2020-04-20 17:20', 'CZ6262'), (16, '2020-04-20 10:30', '3U8206'),
#                 (16, '2020-04-20 06:05', 'AQ1275'), (16, '2020-04-20 07:45', 'MU2818'),
#                 (16, '2020-04-20 13:00', 'KY9865'), (16, '2020-04-20 10:15', 'CZ3599'),
#                 (16, '2020-04-20 13:45', 'CA1322'), (16, '2020-04-20 06:15', '9C8542'),
#                 (16, '2020-04-20 12:50', 'MU9312'), (16, '2020-04-20 08:55', 'HU7275')],
#                [(17, '2020-04-20 08:35', 'CZ3463'), (17, '2020-04-20 21:05', 'ZH9445'),
#                 (17, '2020-04-20 12:45', 'CA3743'), (17, '2020-04-20 08:30', 'KY9671'),
#                 (17, '2020-04-20 11:35', 'KY9673'), (17, '2020-04-20 23:10', 'MU5232'),
#                 (17, '2020-04-20 13:35', 'ZH9993'), (17, '2020-04-20 07:00', 'HU7271'),
#                 (17, '2020-04-20 08:55', 'CA1838'), (17, '2020-04-20 16:30', 'MU5312'),
#                 (17, '2020-04-20 14:35', 'KN5896'), (17, '2020-04-20 11:40', 'MU5182'),
#                 (17, '2020-04-20 06:55', 'JD5855'), (17, '2020-04-20 07:15', 'ZH9995')],
#                [(18, '2020-04-20 14:40', 'CZ6378'), (18, '2020-04-20 07:20', 'JD5227'),
#                 (18, '2020-04-20 19:40', 'CZ3439'), (18, '2020-04-20 16:51', 'D2367'),
#                 (18, '2020-04-20 07:25', 'JD5161'), (18, '2020-04-20 07:10', 'ZH9655'),
#                 (18, '2020-04-20 07:35', 'JD5719'), (18, '2020-04-20 14:35', 'KN5896'),
#                 (18, '2020-04-20 06:35', 'ZH9979'), (18, '2020-04-20 08:35', 'ZH9693'),
#                 (18, '2020-04-20 17:15', 'ZH9657')],
#                [(19, '2020-04-20 16:40', 'CZ4994'), (19, '2020-04-20 09:15', 'CA4310'),
#                 (19, '2020-04-20 16:55', 'CZ4984'), (19, '2020-04-20 21:05', 'CA3879'),
#                 (19, '2020-04-20 13:45', 'KY9983'), (19, '2020-04-20 19:05', 'CZ3801'),
#                 (19, '2020-04-20 14:45', 'CZ3775'), (19, '2020-04-20 06:45', 'AQ1033'),
#                 (19, '2020-04-20 16:45', 'MU5282'), (19, '2020-04-20 20:10', 'CZ3161'),
#                 (19, '2020-04-20 08:30', 'CZ3601')],
#                [(20, '2020-04-20 11:15', 'ZH9695'), (20, '2020-04-20 21:05', 'HU7041'),
#                 (20, '2020-04-20 07:45', 'KY9441'), (20, '2020-04-20 18:15', 'HU7571'),
#                 (20, '2020-04-20 09:35', 'CA3783'), (20, '2020-04-20 07:35', 'CA1382'),
#                 (20, '2020-04-20 07:50', 'MU9352'), (20, '2020-04-20 13:45', 'MF8320'),
#                 (20, '2020-04-20 23:05', 'AQ1267'), (20, '2020-04-20 20:20', 'MU9794'),
#                 (20, '2020-04-20 10:50', 'ZH9861'), (20, '2020-04-20 13:00', 'HU7806'),
#                 (20, '2020-04-20 13:15', 'MU5386'), (20, '2020-04-20 06:20', 'GJ8061'),
#                 (20, '2020-04-20 06:35', 'AQ1055')],
#                [(21, '2020-04-20 13:35', 'ZH9993'), (21, '2020-04-20 16:10', 'CZ3417'),
#                 (21, '2020-04-20 14:35', 'KN5896'), (21, '2020-04-20 10:40', 'CA1720'),
#                 (21, '2020-04-20 17:15', 'CA1722'), (21, '2020-04-20 18:15', 'ZH9981'),
#                 (21, '2020-04-20 17:55', 'MF8382'), (21, '2020-04-20 11:15', 'ZH9695'),
#                 (21, '2020-04-20 11:10', 'CZ3415'), (21, '2020-04-20 08:15', 'CZ6498'),
#                 (21, '2020-04-20 10:35', 'CZ6605'), (21, '2020-04-20 10:15', 'HU7315'),
#                 (21, '2020-04-20 16:15', 'HU7273'), (21, '2020-04-20 11:40', 'MU5182'),
#                 (21, '2020-04-20 22:20', 'HU7810'), (21, '2020-04-20 18:45', 'HU7808'),
#                 (21, '2020-04-20 15:00', 'CZ3999')],
#                [(22, '2020-04-20 10:50', 'EU2236'), (22, '2020-04-20 07:10', 'ZH9655'),
#                 (22, '2020-04-20 13:30', 'FM9314'), (22, '2020-04-20 07:35', 'HU7261'),
#                 (22, '2020-04-20 13:45', '3U4441'), (22, '2020-04-20 11:15', 'ZH9695'),
#                 (22, '2020-04-20 08:20', 'CZ3409'), (22, '2020-04-20 22:40', 'CZ3662'),
#                 (22, '2020-04-20 15:28', 'D1752'), (22, '2020-04-20 09:55', 'FM9308')],
#                [(23, '2020-04-20 10:10', 'CZ3405'), (23, '2020-04-20 12:20', 'CZ6322'),
#                 (23, '2020-04-20 14:20', 'GJ8700'), (23, '2020-04-20 07:30', 'FM9302'),
#                 (23, '2020-04-20 08:50', 'KY9651'), (23, '2020-04-20 07:50', 'CA4547')],
#                [(24, '2020-04-20 07:35', 'CZ6342'), (24, '2020-04-20 16:45', 'CZ3606'),
#                 (24, '2020-04-20 20:40', 'CA4304'), (24, '2020-04-20 18:55', 'CZ3427'),
#                 (24, '2020-04-20 13:15', 'MU7582'), (24, '2020-04-20 16:55', '3U8734'),
#                 (24, '2020-04-20 20:55', 'JD5269'), (24, '2020-04-20 13:35', 'ZH9993'),
#                 (24, '2020-04-20 11:40', 'KY8280'), (24, '2020-04-20 16:05', 'CZ3145'),
#                 (24, '2020-04-20 13:00', 'ZH9865'), (24, '2020-04-20 18:45', 'CA1328'),
#                 (24, '2020-04-20 17:00', 'CZ3113'), (24, '2020-04-20 18:30', 'MU5310'),
#                 (24, '2020-04-20 17:15', 'KY9657'), (24, '2020-04-20 15:35', 'CZ6368'),
#                 (24, '2020-04-20 08:20', 'CZ3133')],
#                [(25, '2020-04-20 06:45', 'AQ1033'), (25, '2020-04-20 13:50', 'CA4308'),
#                 (25, '2020-04-20 18:40', 'CA4334'), (25, '2020-04-20 12:45', '3U4383'),
#                 (25, '2020-04-20 22:00', 'MF8326'), (25, '2020-04-20 19:30', 'CZ3647'),
#                 (25, '2020-04-20 11:10', 'HU7309'), (25, '2020-04-20 22:50', 'CA1728'),
#                 (25, '2020-04-20 07:20', 'CZ3521'), (25, '2020-04-20 06:55', 'AQ1021'),
#                 (25, '2020-04-20 08:05', 'CZ8831'), (25, '2020-04-20 11:50', 'KY9863'),
#                 (25, '2020-04-20 06:30', 'CA3429'), (25, '2020-04-20 20:45', 'CA1366'),
#                 (25, '2020-04-20 16:00', 'CZ3177'), (25, '2020-04-20 10:45', 'CZ3506'),
#                 (25, '2020-04-20 13:25', 'CZ6330')],
#                [(26, '2020-3-26 9:34', 'SU1112'), (26, '2020-04-20 06:55', 'MU5639'),
#                 (26, '2020-04-20 11:15', 'SC9695'), (26, '2020-04-20 21:55', '3U8742'),
#                 (26, '2020-04-20 13:35', 'KY9993'), (26, '2020-04-20 11:55', '3U8730'),
#                 (26, '2020-04-20 07:45', 'CA3741'), (26, '2020-04-20 07:50', 'CZ3604'),
#                 (26, '2020-04-20 14:06', 'C7707'), (26, '2020-04-20 20:35', 'CZ3819'),
#                 (26, '2020-04-20 17:25', 'CA3475'), (26, '2020-04-20 12:55', 'CZ4912'),
#                 (26, '2020-04-20 08:35', 'ZH9693'), (26, '2020-04-20 14:50', 'CZ3385'),
#                 (26, '2020-04-20 06:20', 'AQ1105'), (26, '2020-04-20 10:30', 'MU5302')], []]
#
#
#
#
# duiyingdatachulidata = [(0, 1, '2020-04-20 11:15', 'KY9695'), (1, 1, '2020-04-20 06:05', 'GJ8827'),
#                         (2, 1, '2020-04-20 09:40', 'PN6202'), (3, 1, '2020-04-20 10:10', '3U8793'),
#                         (4, 1, '2020-04-20 16:05', 'G6241'), (5, 1, '2020-04-20 16:10', 'HU7351'),
#                         (6, 1, '2020-04-20 11:50', 'CZ4982'), (7, 1, '2020-04-20 09:35', 'ZH9683'),
#                         (8, 1, '2020-04-20 18:35', 'CZ5140'), (9, 1, '2020-04-20 13:35', 'C7767'),
#                         (10, 1, '2020-04-20 16:40', 'KN5898'), (11, 1, '2020-04-20 07:50', 'FM9352'),
#                         (12, 1, '2020-04-20 11:35', 'ZH9673'), (13, 1, '2020-04-20 07:20', 'JD5227'),
#                         (14, 1, '2020-04-20 08:45', 'ZH9859'), (15, 1, '2020-04-20 12:45', 'CA1352'),
#                         (16, 1, '2020-04-20 07:00', 'CZ3533'), (17, 1, '2020-04-20 13:30', 'FM9314'),
#                         (18, 1, '2020-04-20 07:10', 'KY9655'), (19, 1, '2020-04-20 17:15', 'CA3547'),
#                         (20, 2, '2020-04-20 11:20', 'CZ2806'), (21, 2, '2020-04-20 13:35', 'ZH9993'),
#                         (22, 2, '2020-04-20 16:20', 'MU5738'), (23, 2, '2020-04-20 18:05', 'HU7269'),
#                         (24, 2, '2020-04-20 08:00', 'HU7804'), (25, 2, '2020-04-20 14:00', 'CZ3109'),
#                         (26, 2, '2020-04-20 16:00', 'CZ3503'), (27, 2, '2020-04-20 09:15', 'CA1396'),
#                         (28, 3, '2020-04-20 07:05', 'CZ2856'), (29, 3, '2020-04-20 20:10', 'CZ3388'),
#                         (30, 3, '2020-04-20 06:30', 'CZ8647'), (31, 3, '2020-04-20 09:15', 'CZ3437'),
#                         (32, 3, '2020-04-20 09:40', 'HU7729'), (33, 3, '2020-04-20 20:20', 'MU5218'),
#                         (34, 3, '2020-04-20 17:25', 'KY9675'), (35, 3, '2020-04-20 13:50', 'CZ3407'),
#                         (36, 3, '2020-04-20 21:05', 'ZH9871'), (37, 3, '2020-04-20 09:35', 'CA1380'),
#                         (38, 3, '2020-04-20 20:55', 'CA1866'), (39, 3, '2020-04-20 12:50', 'FM9312'),
#                         (40, 3, '2020-04-20 20:30', 'SC4676'), (41, 4, '2020-04-20 22:45', '3U8736'),
#                         (42, 4, '2020-04-20 12:45', 'ZH9443'), (43, 4, '2020-04-20 14:45', 'CZ3877'),
#                         (44, 4, '2020-04-20 18:15', '3U4439'), (45, 4, '2020-04-20 12:30', 'CZ3327'),
#                         (46, 4, '2020-04-20 20:05', 'MU2306'), (47, 4, '2020-04-20 08:30', 'MU5304'),
#                         (48, 4, '2020-04-20 17:00', 'CZ3545'), (49, 5, '2020-04-20 09:26', 'SU1111'),
#                         (50, 5, '2020-04-20 12:00', 'AQ1115'), (51, 5, '2020-04-20 19:10', 'GX8916'),
#                         (52, 5, '2020-04-20 14:05', 'HU7349'), (53, 5, '2020-04-20 11:10', 'CA4306'),
#                         (54, 5, '2020-04-20 07:10', 'ZH9655'), (55, 5, '2020-04-20 18:05', 'MU5216'),
#                         (56, 5, '2020-04-20 13:45', 'CZ5120'), (57, 5, '2020-04-20 16:25', 'KY9867'),
#                         (58, 5, '2020-04-20 21:00', 'CZ3107'), (59, 5, '2020-04-20 10:00', 'CZ3121'),
#                         (60, 5, '2020-04-20 11:00', 'CZ3103'), (61, 5, '2020-04-20 12:30', 'FM9310'),
#                         (62, 5, '2020-04-20 13:00', 'CZ3525'), (63, 5, '2020-04-20 17:30', 'FM9318'),
#                         (64, 5, '2020-04-20 10:55', 'CZ3301'), (65, 6, '2020-04-20 15:10', 'CZ2818'),
#                         (66, 6, '2020-04-20 23:05', 'PN6254'), (67, 6, '2020-04-20 15:40', 'K535'),
#                         (68, 6, '2020-04-20 14:15', 'C7641'), (69, 6, '2020-04-20 11:30', 'CZ3869'),
#                         (70, 6, '2020-04-20 12:30', 'CZ3511'), (71, 6, '2020-04-20 16:05', 'CZ3847'),
#                         (72, 6, '2020-04-20 17:05', 'CZ3829'), (73, 6, '2020-04-20 11:10', 'MU5734'),
#                         (74, 6, '2020-04-20 07:20', 'JD5227'), (75, 6, '2020-04-20 06:20', 'AQ1105'),
#                         (76, 6, '2020-04-20 15:30', 'MU5308'), (77, 6, '2020-04-20 18:40', 'CZ6344'),
#                         (78, 6, '2020-04-20 06:15', 'AQ1059'), (79, 6, '2020-04-20 14:35', 'KN5896'),
#                         (80, 7, '2020-04-20 08:35', 'ZH9693'), (81, 7, '2020-04-20 16:40', '3U8746'),
#                         (82, 7, '2020-04-20 13:35', 'KY9993'), (83, 7, '2020-04-20 16:48', 'C7709'),
#                         (84, 7, '2020-04-20 21:10', 'CZ3377'), (85, 7, '2020-04-20 14:25', 'CZ3501'),
#                         (86, 7, '2020-04-20 17:55', 'CZ5164'), (87, 7, '2020-04-20 06:30', 'KY9855'),
#                         (88, 7, '2020-04-20 16:25', 'ZH9867'), (89, 7, '2020-04-20 18:45', 'KY9869'),
#                         (90, 7, '2020-04-20 08:00', 'CZ3101'), (91, 7, '2020-04-20 11:00', 'CZ3537'),
#                         (92, 7, '2020-04-20 08:50', 'ZH9651'), (93, 7, '2020-04-20 07:10', 'CA3833'),
#                         (94, 8, '2020-04-20 13:45', 'CZ3425'), (95, 8, '2020-04-20 10:55', 'CA4320'),
#                         (96, 8, '2020-04-20 19:25', 'CZ3608'), (97, 8, '2020-04-20 18:35', 'MF8348'),
#                         (98, 8, '2020-04-20 14:06', 'C7707'), (99, 8, '2020-04-20 14:55', 'HU7361'),
#                         (100, 8, '2020-04-20 18:15', 'CA3605'), (101, 8, '2020-04-20 06:45', 'AQ1033'),
#                         (102, 8, '2020-04-20 06:05', 'AQ1053'), (103, 8, '2020-04-20 16:35', 'CZ3499'),
#                         (104, 8, '2020-04-20 07:20', 'ZH9857'), (105, 8, '2020-04-20 08:45', 'CA3883'),
#                         (106, 8, '2020-04-20 08:00', 'CZ3523'), (107, 8, '2020-04-20 08:50', 'CA3495'),
#                         (108, 9, '2020-04-20 23:40', 'PN6206'), (109, 9, '2020-04-20 17:50', 'CA4302'),
#                         (110, 9, '2020-04-20 11:30', 'MU5212'), (111, 9, '2020-04-20 08:55', 'HU7275'),
#                         (112, 9, '2020-04-20 22:10', 'MU5742'), (113, 9, '2020-04-20 15:15', 'D2834'),
#                         (114, 9, '2020-04-20 09:10', 'CZ3843'), (115, 9, '2020-04-20 10:50', 'KY9861'),
#                         (116, 9, '2020-04-20 18:00', 'CZ3111'), (117, 9, '2020-04-20 16:40', 'KN5898'),
#                         (118, 9, '2020-04-20 07:15', 'KY9995'), (119, 10, '2020-04-20 08:55', 'CA4354'),
#                         (120, 10, '2020-04-20 18:35', 'CZ2840'), (121, 10, '2020-04-20 12:00', 'CZ3443'),
#                         (122, 10, '2020-04-20 14:15', 'C7641'), (123, 10, '2020-04-20 14:35', 'KN5896'),
#                         (124, 10, '2020-04-20 09:00', 'CZ3803'), (125, 10, '2020-04-20 13:55', 'CZ3623'),
#                         (126, 10, '2020-04-20 08:30', 'CA3771'), (127, 10, '2020-04-20 08:35', 'ZH9693'),
#                         (128, 10, '2020-04-20 11:15', 'ZH9695'), (129, 10, '2020-04-20 14:55', 'CZ3449'),
#                         (130, 10, '2020-04-20 06:10', 'AQ1027'), (131, 10, '2020-04-20 07:20', 'CA3875'),
#                         (132, 10, '2020-04-20 08:10', 'CA1310'), (133, 10, '2020-04-20 16:20', 'CA1829'),
#                         (134, 10, '2020-04-20 20:50', 'CZ6302'), (135, 10, '2020-04-20 13:35', 'ZH9993'),
#                         (136, 11, '2020-04-20 11:15', 'CA3585'), (137, 11, '2020-04-20 08:15', 'CZ3129'),
#                         (138, 11, '2020-04-20 09:35', 'KY9683'), (139, 11, '2020-04-20 20:20', 'MU9794'),
#                         (140, 11, '2020-04-20 19:35', 'CZ354'), (141, 11, '2020-04-20 13:45', 'CA3445'),
#                         (142, 11, '2020-04-20 08:30', 'ZH9671'), (143, 11, '2020-04-20 11:35', 'CA3735'),
#                         (144, 11, '2020-04-20 10:43', 'K237'), (145, 11, '2020-04-20 23:10', 'CZ3423'),
#                         (146, 11, '2020-04-20 08:45', 'KY9859'), (147, 11, '2020-04-20 11:50', 'ZH9863'),
#                         (148, 11, '2020-04-20 21:30', 'CZ3165'), (149, 11, '2020-04-20 10:30', 'CA1330'),
#                         (150, 11, '2020-04-20 19:00', 'CZ3105'), (151, 11, '2020-04-20 09:00', 'CZ3099'),
#                         (152, 11, '2020-04-20 06:45', '9C8930'), (153, 11, '2020-04-20 11:30', 'FM9304'),
#                         (154, 11, '2020-04-20 12:00', 'CZ3539'), (155, 11, '2020-04-20 17:15', 'SC9045'),
#                         (156, 12, '2020-3-26 9:34', 'SU1112'), (157, 12, '2020-04-20 07:40', 'CA4396'),
#                         (158, 12, '2020-04-20 13:35', 'KY9993'), (159, 12, '2020-04-20 06:35', 'AQ1037'),
#                         (160, 12, '2020-04-20 11:00', 'MF8324'), (161, 12, '2020-04-20 11:25', 'CZ3195'),
#                         (162, 12, '2020-04-20 17:25', 'ZH9675'), (163, 12, '2020-04-20 12:55', '3U8162'),
#                         (164, 12, '2020-04-20 18:10', 'MU5740'), (165, 12, '2020-04-20 07:30', 'MU9302'),
#                         (166, 12, '2020-04-20 12:50', 'SC4712'), (167, 13, '2020-04-20 16:55', 'CA4350'),
#                         (168, 13, '2020-04-20 12:25', 'CA4362'), (169, 13, '2020-04-20 21:05', 'KY9445'),
#                         (170, 13, '2020-04-20 09:25', 'CZ6437'), (171, 13, '2020-04-20 19:05', 'CA1726'),
#                         (172, 13, '2020-04-20 18:15', 'KY9981'), (173, 13, '2020-04-20 06:45', 'AQ1033'),
#                         (174, 13, '2020-04-20 18:30', 'CZ3489'), (175, 13, '2020-04-20 17:55', 'CZ6296'),
#                         (176, 13, '2020-04-20 06:30', 'ZH9855'), (177, 13, '2020-04-20 19:45', 'CA1302'),
#                         (178, 13, '2020-04-20 16:45', 'CA1340'), (179, 13, '2020-04-20 19:40', 'CZ5256'),
#                         (180, 13, '2020-04-20 10:00', 'CZ6332'), (181, 14, '2020-04-20 09:25', 'HU7039'),
#                         (182, 14, '2020-04-20 10:45', 'CZ3380'), (183, 14, '2020-04-20 07:45', 'ZH9441'),
#                         (184, 14, '2020-04-20 11:50', '3U8732'), (185, 14, '2020-04-20 21:30', 'FM9320'),
#                         (186, 14, '2020-04-20 06:30', 'MU5746'), (187, 14, '2020-04-20 14:20', 'MU5736'),
#                         (188, 14, '2020-04-20 07:20', 'JD5227'), (189, 14, '2020-04-20 21:05', 'KY9871'),
#                         (190, 14, '2020-04-20 21:15', 'CZ3871'), (191, 14, '2020-04-20 20:50', 'HU7802'),
#                         (192, 14, '2020-04-20 09:30', 'MU5314'), (193, 14, '2020-04-20 16:40', 'CZ3581'),
#                         (194, 14, '2020-04-20 07:10', 'ZH9655'), (195, 15, '2020-04-20 08:35', 'KY9693'),
#                         (196, 15, '2020-04-20 21:45', 'CZ2826'), (197, 15, '2020-04-20 07:15', 'CZ3403'),
#                         (198, 15, '2020-04-20 15:40', 'CA4318'), (199, 15, '2020-04-20 12:45', 'KY9443'),
#                         (200, 15, '2020-04-20 11:55', 'CZ4980'), (201, 15, '2020-04-20 17:35', 'CZ6540'),
#                         (202, 15, '2020-04-20 12:40', 'CA1730'), (203, 15, '2020-04-20 06:35', '3U4437'),
#                         (204, 15, '2020-04-20 07:50', 'CZ3615'), (205, 15, '2020-04-20 19:35', 'CZ3905'),
#                         (206, 15, '2020-04-20 06:45', 'AQ1033'), (207, 15, '2020-04-20 13:35', 'ZH9993'),
#                         (208, 15, '2020-04-20 16:10', 'CZ3692'), (209, 15, '2020-04-20 16:52', 'D2840'),
#                         (210, 15, '2020-04-20 11:00', 'MU2808'), (211, 15, '2020-04-20 18:45', 'ZH9869'),
#                         (212, 15, '2020-04-20 15:45', 'CA1316'), (213, 15, '2020-04-20 10:00', 'CZ3531'),
#                         (214, 15, '2020-04-20 14:30', 'MU5306'), (215, 15, '2020-04-20 11:40', 'MU5182'),
#                         (216, 16, '2020-04-20 19:25', 'CZ6852'), (217, 16, '2020-04-20 09:20', 'CZ6276'),
#                         (218, 16, '2020-04-20 19:55', 'CA4342'), (219, 16, '2020-04-20 13:35', 'ZH9993'),
#                         (220, 16, '2020-04-20 16:59', 'C7643'), (221, 16, '2020-04-20 13:30', 'CZ3413'),
#                         (222, 16, '2020-04-20 17:40', 'CZ3483'), (223, 16, '2020-04-20 07:10', 'CA3833'),
#                         (224, 16, '2020-04-20 17:20', 'CZ6262'), (225, 16, '2020-04-20 10:30', '3U8206'),
#                         (226, 16, '2020-04-20 06:05', 'AQ1275'), (227, 16, '2020-04-20 07:45', 'MU2818'),
#                         (228, 16, '2020-04-20 13:00', 'KY9865'), (229, 16, '2020-04-20 10:15', 'CZ3599'),
#                         (230, 16, '2020-04-20 13:45', 'CA1322'), (231, 16, '2020-04-20 06:15', '9C8542'),
#                         (232, 16, '2020-04-20 12:50', 'MU9312'), (233, 16, '2020-04-20 08:55', 'HU7275'),
#                         (234, 17, '2020-04-20 08:35', 'CZ3463'), (235, 17, '2020-04-20 21:05', 'ZH9445'),
#                         (236, 17, '2020-04-20 12:45', 'CA3743'), (237, 17, '2020-04-20 08:30', 'KY9671'),
#                         (238, 17, '2020-04-20 11:35', 'KY9673'), (239, 17, '2020-04-20 23:10', 'MU5232'),
#                         (240, 17, '2020-04-20 13:35', 'ZH9993'), (241, 17, '2020-04-20 07:00', 'HU7271'),
#                         (242, 17, '2020-04-20 08:55', 'CA1838'), (243, 17, '2020-04-20 16:30', 'MU5312'),
#                         (244, 17, '2020-04-20 14:35', 'KN5896'), (245, 17, '2020-04-20 11:40', 'MU5182'),
#                         (246, 17, '2020-04-20 06:55', 'JD5855'), (247, 17, '2020-04-20 07:15', 'ZH9995'),
#                         (248, 18, '2020-04-20 14:40', 'CZ6378'), (249, 18, '2020-04-20 07:20', 'JD5227'),
#                         (250, 18, '2020-04-20 19:40', 'CZ3439'), (251, 18, '2020-04-20 16:51', 'D2367'),
#                         (252, 18, '2020-04-20 07:25', 'JD5161'), (253, 18, '2020-04-20 07:10', 'ZH9655'),
#                         (254, 18, '2020-04-20 07:35', 'JD5719'), (255, 18, '2020-04-20 14:35', 'KN5896'),
#                         (256, 18, '2020-04-20 06:35', 'ZH9979'), (257, 18, '2020-04-20 08:35', 'ZH9693'),
#                         (258, 18, '2020-04-20 17:15', 'ZH9657'), (259, 19, '2020-04-20 16:40', 'CZ4994'),
#                         (260, 19, '2020-04-20 09:15', 'CA4310'), (261, 19, '2020-04-20 16:55', 'CZ4984'),
#                         (262, 19, '2020-04-20 21:05', 'CA3879'), (263, 19, '2020-04-20 13:45', 'KY9983'),
#                         (264, 19, '2020-04-20 19:05', 'CZ3801'), (265, 19, '2020-04-20 14:45', 'CZ3775'),
#                         (266, 19, '2020-04-20 06:45', 'AQ1033'), (267, 19, '2020-04-20 16:45', 'MU5282'),
#                         (268, 19, '2020-04-20 20:10', 'CZ3161'), (269, 19, '2020-04-20 08:30', 'CZ3601'),
#                         (270, 20, '2020-04-20 11:15', 'ZH9695'), (271, 20, '2020-04-20 21:05', 'HU7041'),
#                         (272, 20, '2020-04-20 07:45', 'KY9441'), (273, 20, '2020-04-20 18:15', 'HU7571'),
#                         (274, 20, '2020-04-20 09:35', 'CA3783'), (275, 20, '2020-04-20 07:35', 'CA1382'),
#                         (276, 20, '2020-04-20 07:50', 'MU9352'), (277, 20, '2020-04-20 13:45', 'MF8320'),
#                         (278, 20, '2020-04-20 23:05', 'AQ1267'), (279, 20, '2020-04-20 20:20', 'MU9794'),
#                         (280, 20, '2020-04-20 10:50', 'ZH9861'), (281, 20, '2020-04-20 13:00', 'HU7806'),
#                         (282, 20, '2020-04-20 13:15', 'MU5386'), (283, 20, '2020-04-20 06:20', 'GJ8061'),
#                         (284, 20, '2020-04-20 06:35', 'AQ1055'), (285, 21, '2020-04-20 13:35', 'ZH9993'),
#                         (286, 21, '2020-04-20 16:10', 'CZ3417'), (287, 21, '2020-04-20 14:35', 'KN5896'),
#                         (288, 21, '2020-04-20 10:40', 'CA1720'), (289, 21, '2020-04-20 17:15', 'CA1722'),
#                         (290, 21, '2020-04-20 18:15', 'ZH9981'), (291, 21, '2020-04-20 17:55', 'MF8382'),
#                         (292, 21, '2020-04-20 11:15', 'ZH9695'), (293, 21, '2020-04-20 11:10', 'CZ3415'),
#                         (294, 21, '2020-04-20 08:15', 'CZ6498'), (295, 21, '2020-04-20 10:35', 'CZ6605'),
#                         (296, 21, '2020-04-20 10:15', 'HU7315'), (297, 21, '2020-04-20 16:15', 'HU7273'),
#                         (298, 21, '2020-04-20 11:40', 'MU5182'), (299, 21, '2020-04-20 22:20', 'HU7810'),
#                         (300, 21, '2020-04-20 18:45', 'HU7808'), (301, 21, '2020-04-20 15:00', 'CZ3999'),
#                         (302, 22, '2020-04-20 10:50', 'EU2236'), (303, 22, '2020-04-20 07:10', 'ZH9655'),
#                         (304, 22, '2020-04-20 13:30', 'FM9314'), (305, 22, '2020-04-20 07:35', 'HU7261'),
#                         (306, 22, '2020-04-20 13:45', '3U4441'), (307, 22, '2020-04-20 11:15', 'ZH9695'),
#                         (308, 22, '2020-04-20 08:20', 'CZ3409'), (309, 22, '2020-04-20 22:40', 'CZ3662'),
#                         (310, 22, '2020-04-20 15:28', 'D1752'), (311, 22, '2020-04-20 09:55', 'FM9308'),
#                         (312, 23, '2020-04-20 10:10', 'CZ3405'), (313, 23, '2020-04-20 12:20', 'CZ6322'),
#                         (314, 23, '2020-04-20 14:20', 'GJ8700'), (315, 23, '2020-04-20 07:30', 'FM9302'),
#                         (316, 23, '2020-04-20 08:50', 'KY9651'), (317, 23, '2020-04-20 07:50', 'CA4547'),
#                         (318, 24, '2020-04-20 07:35', 'CZ6342'), (319, 24, '2020-04-20 16:45', 'CZ3606'),
#                         (320, 24, '2020-04-20 20:40', 'CA4304'), (321, 24, '2020-04-20 18:55', 'CZ3427'),
#                         (322, 24, '2020-04-20 13:15', 'MU7582'), (323, 24, '2020-04-20 16:55', '3U8734'),
#                         (324, 24, '2020-04-20 20:55', 'JD5269'), (325, 24, '2020-04-20 13:35', 'ZH9993'),
#                         (326, 24, '2020-04-20 11:40', 'KY8280'), (327, 24, '2020-04-20 16:05', 'CZ3145'),
#                         (328, 24, '2020-04-20 13:00', 'ZH9865'), (329, 24, '2020-04-20 18:45', 'CA1328'),
#                         (330, 24, '2020-04-20 17:00', 'CZ3113'), (331, 24, '2020-04-20 18:30', 'MU5310'),
#                         (332, 24, '2020-04-20 17:15', 'KY9657'), (333, 24, '2020-04-20 15:35', 'CZ6368'),
#                         (334, 24, '2020-04-20 08:20', 'CZ3133'), (335, 25, '2020-04-20 06:45', 'AQ1033'),
#                         (336, 25, '2020-04-20 13:50', 'CA4308'), (337, 25, '2020-04-20 18:40', 'CA4334'),
#                         (338, 25, '2020-04-20 12:45', '3U4383'), (339, 25, '2020-04-20 22:00', 'MF8326'),
#                         (340, 25, '2020-04-20 19:30', 'CZ3647'), (341, 25, '2020-04-20 11:10', 'HU7309'),
#                         (342, 25, '2020-04-20 22:50', 'CA1728'), (343, 25, '2020-04-20 07:20', 'CZ3521'),
#                         (344, 25, '2020-04-20 06:55', 'AQ1021'), (345, 25, '2020-04-20 08:05', 'CZ8831'),
#                         (346, 25, '2020-04-20 11:50', 'KY9863'), (347, 25, '2020-04-20 06:30', 'CA3429'),
#                         (348, 25, '2020-04-20 20:45', 'CA1366'), (349, 25, '2020-04-20 16:00', 'CZ3177'),
#                         (350, 25, '2020-04-20 10:45', 'CZ3506'), (351, 25, '2020-04-20 13:25', 'CZ6330'),
#                         (352, 26, '2020-3-26 9:34', 'SU1112'), (353, 26, '2020-04-20 06:55', 'MU5639'),
#                         (354, 26, '2020-04-20 11:15', 'SC9695'), (355, 26, '2020-04-20 21:55', '3U8742'),
#                         (356, 26, '2020-04-20 13:35', 'KY9993'), (357, 26, '2020-04-20 11:55', '3U8730'),
#                         (358, 26, '2020-04-20 07:45', 'CA3741'), (359, 26, '2020-04-20 07:50', 'CZ3604'),
#                         (360, 26, '2020-04-20 14:06', 'C7707'), (361, 26, '2020-04-20 20:35', 'CZ3819'),
#                         (362, 26, '2020-04-20 17:25', 'CA3475'), (363, 26, '2020-04-20 12:55', 'CZ4912'),
#                         (364, 26, '2020-04-20 08:35', 'ZH9693'), (365, 26, '2020-04-20 14:50', 'CZ3385'),
#                         (366, 26, '2020-04-20 06:20', 'AQ1105'), (367, 26, '2020-04-20 10:30', 'MU5302')]


def dumpsall():
    f = open("D:/WorkAll/Python/flight/duans.json")
    data = json.load(f)
    return data


def usedijkstra(graph, startIndex, path, cost, max):
    # TODO:堆优化
    lenth = len(graph)
    v = [0] * lenth
    for i in range(lenth):
        if i == startIndex:
            v[startIndex] = 1
        else:
            cost[i] = graph[startIndex][i]
            path[i] = (startIndex if (cost[i] < max) else -1)
    for i in range(1, lenth):
        minCost = max
        curNode = -1
        for w in range(lenth):
            if v[w] == 0 and cost[w] < minCost:
                minCost = cost[w]
                curNode = w
        if curNode == -1: break
        v[curNode] = 1
        for w in range(lenth):
            if v[w] == 0 and (graph[curNode][w] + cost[curNode] < cost[w]):
                cost[w] = graph[curNode][w] + cost[curNode]
                path[w] = curNode
    return path


class dij:
    def __init__(self, time):
        self.time = time
        self.duiyingdatachulidatas = self.duiyingdatachuli()

    def duiying(self):
        data = location_all()['data']
        flyid = flylog_all()['data']
        all = [[] for i in range(len(data) + 1)]
        for index, value in enumerate(flyid):
            flag = True
            if datetime.datetime.strptime(self.time, "%Y-%m-%d") > datetime.datetime.strptime(value['startTime'],
                                                                                              "%Y-%m-%d %H:%M"):
                continue
            if all[value['startlocationId']]:
                for i, j, k in all[value['startlocationId']]:
                    if j == value['startTime']:
                        flag = False
                        break
            if flag:
                all[value['startlocationId']].append(
                    (value['startlocationId'], value['startTime'], value['flightNumber']))
        return all

    def duiyingdatachuli(self):
        duiyingdatachuli = []
        id = 0
        # for i in duiyingdata:
        for i in self.duiying():
            for index, value in enumerate(i):
                temp = (id, value[0], value[1], value[2])
                duiyingdatachuli.append(temp)
                id += 1
        return duiyingdatachuli

    def getstartId(self, locationid, time):
        for i in self.duiyingdatachulidatas:
            if i[1] == locationid and i[2] == time:
                return i

    def getendId(self, locationid, time):
        result = []
        for i in self.duiyingdatachulidatas:
            if i[1] == locationid and datetime.datetime.strptime(i[2], "%Y-%m-%d %H:%M") > datetime.datetime.strptime(
                    time,
                    "%Y-%m-%d %H:%M"):
                result.append(i)
            if i[1] > locationid:
                break
        return result

    def dij_less_money(self, classify, startid, endid):
        '''

        :param classify:  price,ticket,money
        :param startid:
        :param endid:
        :return:
        '''
        # duiyingdatachulidatas = duiyingdatachuli()
        num = len(self.duiyingdatachulidatas)
        data = [[float('inf') for _ in range(num)] for _ in range(num)]
        allfly = flylog_all()['data']
        for i in allfly:
            if datetime.datetime.strptime(self.time, "%Y-%m-%d") > datetime.datetime.strptime(i['startTime'],
                                                                                              "%Y-%m-%d %H:%M"):
                continue
            start = self.getstartId(i['startlocationId'], i['startTime'])
            end = self.getendId(i["endlocationId"], i['endTime'])
            for no,j in enumerate(end):
                tempdata = search_flylog_by_flightNumber_noreplace(start[3])
                for temp in tempdata:
                    if temp['startlocationId'] == i['startlocationId']:
                        if classify == 'ticket':
                            data[start[0]][j[0]] = 1000 - temp[classify]
                        elif classify == 'startTime':
                            data[start[0]][j[0]] = (datetime.datetime.strptime(temp[classify],
                                                                               "%Y-%m-%d %H:%M") - datetime.datetime.strptime(
                                self.duiyingdatachulidatas[no][2], "%Y-%m-%d %H:%M")).seconds
                        elif classify == 'zonghe':
                            data[start[0]][j[0]] = (datetime.datetime.strptime(temp['startTime'],
                                                                               "%Y-%m-%d %H:%M") - datetime.datetime.strptime(
                                self.duiyingdatachulidatas[no][2], "%Y-%m-%d %H:%M")).seconds /1000+(1000 - temp['ticket'])+ 0.5*temp['price']
                        else:
                            data[start[0]][j[0]] = temp[classify]
                        break
        graph_list = data
        max = 2147483647
        superstart = len(graph_list[0]) + 1
        superend = superstart + 1
        list = [[max for i in range(superend)] for j in range(superend)]
        for i, value2 in enumerate(graph_list):
            for j, value in enumerate(value2):
                if math.isinf(value) == False:
                    list[i][j] = value

        for i in self.duiyingdatachulidatas:
            if i[1] == startid:
                list[superstart - 1][i[0]] = 1
        for i in self.duiyingdatachulidatas:
            if i[1] == endid:
                list[i[0]][superend - 1] = 1

        path = [0] * superend
        cost = [0] * superend
        result = usedijkstra(list, superstart - 1, path, cost, max)
        temp = result[superend - 1]
        temp = result[temp]  # 为了少遍历一次
        flylogresult = []
        while temp != superstart - 1:
            tempdata = search_flylog_by_flightNumber_noreplace(self.duiyingdatachulidatas[temp][3])
            for tem in tempdata:
                if tem['startlocationId'] == self.duiyingdatachulidatas[temp][1]:
                    flylogresult.append(tem)
                    break
            temp = result[temp]
        for i in flylogresult:
            i["startlocationId"] = utils.get_location_name(i["startlocationId"])
            i["endlocationId"] = utils.get_location_name(i["endlocationId"])
            for item in i["stop"]:
                item["location"] = utils.get_location_name(item["location"])
            i["airId"] = utils.get_airline_name(i["airId"])
        return flylogresult


# print(dij('2020-04-20').dij_less_money('zonghe', 1, 3))
# print(dij('2020-04-20').dij_less_money('price', 1, 20))
'''
样例输出：
[{'airId': 8, 'flightNumber': 'GJ8827', 'startTime': '2020-04-20 06:05', 'endTime': '2020-04-20 10:30', 'price': 1098, 'startlocationId': 1, 'endlocationId': 13, 'id': 16, 'stop': [], 'ticket': 17, 'estimateTime': '00:04:25', 'condition': 1}]
[{'airId': 6, 'flightNumber': 'CZ3415', 'startTime': '2020-04-20 11:10', 'endTime': '2020-04-20 13:45', 'price': 320, 'startlocationId': 21, 'endlocationId': 13, 'id': 219, 'stop': [], 'ticket': 19, 'estimateTime': '00:02:35', 'condition': 1}, {'airId': 22, 'flightNumber': 'FM9352', 'startTime': '2020-04-20 07:50', 'endTime': '2020-04-20 10:00', 'price': 370, 'startlocationId': 1, 'endlocationId': 21, 'id': 141, 'stop': [], 'ticket': 23, 'estimateTime': '00:02:10', 'condition': 1}]

'''
